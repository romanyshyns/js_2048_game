{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["var $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    static gameStatuses = {\n        idle: \"idle\",\n        playing: \"playing\",\n        win: \"win\",\n        lose: \"lose\"\n    };\n    constructor(initialState = this.generateDefaultState()){\n        this.initialState = initialState;\n        this.state = initialState.map((row)=>[\n                ...row\n            ]);\n        this.status = $a5fd07fa01589658$var$Game.gameStatuses.idle;\n        this.score = 0;\n    }\n    generateDefaultState() {\n        return Array.from({\n            length: 4\n        }, ()=>Array(4).fill(0));\n    }\n    moveLeft() {\n        if (!this.isStateValid(this.state)) return;\n        const updatedState = this.state.map((row)=>this.applyMove(row));\n        this.updateGameState(updatedState);\n        this.completeMoveTasks();\n    }\n    moveRight() {\n        const reversedState = this.state.map((row)=>[\n                ...row\n            ].reverse());\n        if (!this.isStateValid(reversedState)) return;\n        const updatedState = reversedState.map((row)=>// eslint-disable-next-line prettier/prettier\n            this.applyMove(row).reverse());\n        if (!this.isStateDifferent(this.state, updatedState)) return;\n        this.updateGameState(updatedState);\n        this.completeMoveTasks();\n    }\n    isStateDifferent(stateA, stateB) {\n        return JSON.stringify(stateA) !== JSON.stringify(stateB);\n    }\n    moveUp() {\n        const rotatedRightState = this.rotateRight(this.state);\n        if (!this.isStateValid(rotatedRightState)) return;\n        const newState = [\n            ...rotatedRightState.map((row)=>this.applyMove([\n                    ...row\n                ]))\n        ];\n        const rotatedLeftState = this.rotateLeft(newState);\n        this.updateGameState(rotatedLeftState);\n        this.completeMoveTasks();\n    }\n    moveDown() {\n        const rotatedRightState = this.rotateRight(this.state);\n        const rotatedLocaleState = [\n            ...rotatedRightState.map((row)=>[\n                    ...row\n                ].reverse())\n        ];\n        if (!this.isStateValid(rotatedLocaleState)) return;\n        const newState = rotatedLocaleState.map((row)=>// eslint-disable-next-line prettier/prettier\n            this.applyMove([\n                ...row\n            ]).reverse());\n        const rotatedLeftState = this.rotateLeft(newState);\n        this.updateGameState(rotatedLeftState);\n        this.completeMoveTasks();\n    }\n    applyMove(vector) {\n        const newRow = [];\n        let i = 0;\n        while(i < vector.length){\n            const current = vector[i];\n            const next = vector[i + 1];\n            if (current) {\n                if (current === next) {\n                    newRow.push(current * 2);\n                    this.score += current * 2;\n                    i += 2;\n                } else {\n                    newRow.push(current);\n                    i++;\n                }\n            } else i++;\n        }\n        while(newRow.length < vector.length)newRow.push(0);\n        return newRow;\n    }\n    getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.state;\n    }\n    getStatus() {\n        return this.status;\n    }\n    start() {\n        this.status = $a5fd07fa01589658$var$Game.gameStatuses.playing;\n        this.completeMoveTasks(2);\n    }\n    restart() {\n        this.resetState();\n        this.status = $a5fd07fa01589658$var$Game.gameStatuses.idle;\n        this.score = 0;\n    }\n    generateNewTile() {\n        const emptyCells = this.getEmptyCells();\n        if (!emptyCells.length) return;\n        const [row, col] = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n        this.state[row][col] = Math.random() < 0.9 ? 2 : 4;\n    }\n    getEmptyCells() {\n        const matrix = this.getState();\n        return matrix.flatMap((row, rowIndex)=>// eslint-disable-next-line prettier/prettier\n            row.map((cel, colIndex)=>cel === 0 ? [\n                    rowIndex,\n                    colIndex\n                ] : null)).filter((cell)=>cell !== null);\n    }\n    rotateLeft(transformedMatrix) {\n        const resultMatrix = [];\n        const cols = transformedMatrix[0].length;\n        const rows = transformedMatrix.length;\n        for(let col = 0; col < cols; col++)resultMatrix.push(Array.from({\n            length: rows\n        }, ()=>\"\"));\n        for(let rowIndex = 0; rowIndex < rows; rowIndex++)for(let colIndex = 0; colIndex < cols; colIndex++){\n            const newRow = rowIndex;\n            const newCol = cols - 1 - colIndex;\n            resultMatrix[newRow][newCol] = transformedMatrix[colIndex][rowIndex];\n        }\n        return resultMatrix;\n    }\n    rotateRight(matrix) {\n        const resultMatrix = [];\n        const cols = matrix[0].length;\n        const rows = matrix.length;\n        for(let col = 0; col < cols; col++)resultMatrix.push(Array.from({\n            length: rows\n        }, ()=>\"\"));\n        for(let rowIndex = 0; rowIndex < rows; rowIndex++)for(let colIndex = 0; colIndex < cols; colIndex++){\n            const newRow = cols - 1 - colIndex;\n            const newCol = rowIndex;\n            resultMatrix[newRow][newCol] = this.state[rowIndex][colIndex];\n        }\n        return resultMatrix;\n    }\n    isStateValid(currentState) {\n        if (this.status !== $a5fd07fa01589658$var$Game.gameStatuses.playing) return false;\n        for (const row of currentState){\n            let hasAdjacentEqualCells = false;\n            let hasIsolatedEmptyCell = false;\n            for(let i = 0; i < row.length - 1; i++){\n                if (row[i] === row[i + 1]) {\n                    hasAdjacentEqualCells = true;\n                    break;\n                }\n                if (!row[i]) hasIsolatedEmptyCell = true;\n            }\n            if (hasAdjacentEqualCells || hasIsolatedEmptyCell) return true;\n        }\n        return false;\n    }\n    completeMoveTasks(count = 1) {\n        for(let i = 0; i < count; i++)this.generateNewTile();\n        const state = this.getState();\n        if (this.isVictory(state)) this.status = $a5fd07fa01589658$var$Game.gameStatuses.win;\n        else if (this.isDefeat(state)) this.status = $a5fd07fa01589658$var$Game.gameStatuses.lose;\n    }\n    isDefeat(state) {\n        const rotatedRight = this.rotateRight(state);\n        return [\n            state,\n            rotatedRight\n        ].every((currentState)=>!this.isStateValid(currentState));\n    }\n    isVictory(state) {\n        return state.flat().some((tile)=>tile === 2048);\n    }\n    resetState() {\n        this.state = [\n            ...this.initialState.map((row)=>[\n                    ...row\n                ])\n        ];\n    }\n    updateGameState(state) {\n        this.state = state;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst { startButton: $09e991522ca7e64e$var$startButton, gameScore: $09e991522ca7e64e$var$gameScore, gameBoardRows: $09e991522ca7e64e$var$gameBoardRows, messageLose: $09e991522ca7e64e$var$messageLose, messageWin: $09e991522ca7e64e$var$messageWin, messageStart: $09e991522ca7e64e$var$messageStart } = {\n    startButton: document.querySelector(\".start\"),\n    gameScore: document.querySelector(\".game-score\"),\n    gameBoardRows: document.querySelectorAll(\"tr\"),\n    messageLose: document.querySelector(\".message-lose\"),\n    messageWin: document.querySelector(\".message-win\"),\n    messageStart: document.querySelector(\".message-start\")\n};\nconst $09e991522ca7e64e$var$updateGameFields = ()=>{\n    const state = $09e991522ca7e64e$var$game.getState();\n    $09e991522ca7e64e$var$gameBoardRows.forEach((row, rowIndex)=>{\n        for (const cell of row.cells){\n            cell.textContent = \"\";\n            cell.className = \"field-cell\";\n            const cellIndex = cell.cellIndex;\n            const cellValue = state[rowIndex][cellIndex];\n            if (cellValue !== 0) {\n                cell.textContent = cellValue;\n                cell.classList.add(`${cell.className}--${cellValue}`);\n            }\n        }\n    });\n};\nconst $09e991522ca7e64e$var$updateMessage = ()=>{\n    $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n    if ($09e991522ca7e64e$var$game.getStatus() === \"win\") $09e991522ca7e64e$var$messageWin.classList.remove(\"hidden\");\n    else if ($09e991522ca7e64e$var$game.getStatus() === \"lose\") $09e991522ca7e64e$var$messageLose.classList.remove(\"hidden\");\n    else if ($09e991522ca7e64e$var$game.getStatus() === \"idle\") $09e991522ca7e64e$var$messageStart.classList.remove(\"hidden\");\n};\nconst $09e991522ca7e64e$var$updateScore = ()=>{\n    $09e991522ca7e64e$var$gameScore.textContent = $09e991522ca7e64e$var$game.getScore();\n};\nconst $09e991522ca7e64e$var$startGame = ()=>{\n    if ($09e991522ca7e64e$var$startButton.textContent === \"Start\") $09e991522ca7e64e$var$game.start();\n    if ($09e991522ca7e64e$var$startButton.textContent === \"Restart\") {\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$startButton.textContent = \"Start\";\n        $09e991522ca7e64e$var$startButton.classList.remove(\"restart\");\n        $09e991522ca7e64e$var$startButton.classList.add(\"start\");\n        $09e991522ca7e64e$var$updateScore();\n    }\n    $09e991522ca7e64e$var$updateGameFields();\n    $09e991522ca7e64e$var$updateMessage();\n    $09e991522ca7e64e$var$isFirstMove = true;\n};\nlet $09e991522ca7e64e$var$isFirstMove = true;\nconst $09e991522ca7e64e$var$handleArrowDown = (e)=>{\n    if ($09e991522ca7e64e$var$game.getStatus() === \"idle\") return;\n    switch(e.key){\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n    }\n    if ($09e991522ca7e64e$var$isFirstMove) {\n        $09e991522ca7e64e$var$startButton.textContent = \"Restart\";\n        $09e991522ca7e64e$var$startButton.classList.remove(\"start\");\n        $09e991522ca7e64e$var$startButton.classList.add(\"restart\");\n        $09e991522ca7e64e$var$isFirstMove = false;\n    }\n    $09e991522ca7e64e$var$updateMessage();\n    $09e991522ca7e64e$var$updateGameFields();\n    $09e991522ca7e64e$var$updateScore();\n};\n$09e991522ca7e64e$var$startButton.addEventListener(\"click\", $09e991522ca7e64e$var$startGame);\ndocument.addEventListener(\"keydown\", $09e991522ca7e64e$var$handleArrowDown);\n\n\n//# sourceMappingURL=index.bee2d2d6.js.map\n","const Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst {\n  startButton,\n  gameScore,\n  gameBoardRows,\n  messageLose,\n  messageWin,\n  messageStart,\n} = {\n  startButton: document.querySelector('.start'),\n  gameScore: document.querySelector('.game-score'),\n  gameBoardRows: document.querySelectorAll('tr'),\n  messageLose: document.querySelector('.message-lose'),\n  messageWin: document.querySelector('.message-win'),\n  messageStart: document.querySelector('.message-start'),\n};\n\nconst updateGameFields = () => {\n  const state = game.getState();\n\n  gameBoardRows.forEach((row, rowIndex) => {\n    for (const cell of row.cells) {\n      cell.textContent = '';\n      cell.className = 'field-cell';\n\n      const cellIndex = cell.cellIndex;\n      const cellValue = state[rowIndex][cellIndex];\n\n      if (cellValue !== 0) {\n        cell.textContent = cellValue;\n        cell.classList.add(`${cell.className}--${cellValue}`);\n      }\n    }\n  });\n};\n\nconst updateMessage = () => {\n  messageLose.classList.add('hidden');\n  messageWin.classList.add('hidden');\n  messageStart.classList.add('hidden');\n\n  if (game.getStatus() === 'win') {\n    messageWin.classList.remove('hidden');\n  } else if (game.getStatus() === 'lose') {\n    messageLose.classList.remove('hidden');\n  } else if (game.getStatus() === 'idle') {\n    messageStart.classList.remove('hidden');\n  }\n};\n\nconst updateScore = () => {\n  gameScore.textContent = game.getScore();\n};\n\nconst startGame = () => {\n  if (startButton.textContent === 'Start') {\n    game.start();\n  }\n\n  if (startButton.textContent === 'Restart') {\n    game.restart();\n\n    startButton.textContent = 'Start';\n    startButton.classList.remove('restart');\n    startButton.classList.add('start');\n    updateScore();\n  }\n\n  updateGameFields();\n  updateMessage();\n\n  isFirstMove = true;\n};\n\nlet isFirstMove = true;\n\nconst handleArrowDown = (e) => {\n  if (game.getStatus() === 'idle') {\n    return;\n  }\n\n  switch (e.key) {\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n  }\n\n  if (isFirstMove) {\n    startButton.textContent = 'Restart';\n    startButton.classList.remove('start');\n    startButton.classList.add('restart');\n    isFirstMove = false;\n  }\n\n  updateMessage();\n  updateGameFields();\n  updateScore();\n};\n\nstartButton.addEventListener('click', startGame);\ndocument.addEventListener('keydown', handleArrowDown);\n","'use strict';\n\nclass Game {\n  static gameStatuses = {\n    idle: 'idle',\n    playing: 'playing',\n    win: 'win',\n    lose: 'lose',\n  };\n\n  constructor(initialState = this.generateDefaultState()) {\n    this.initialState = initialState;\n    this.state = initialState.map((row) => [...row]);\n    this.status = Game.gameStatuses.idle;\n    this.score = 0;\n  }\n\n  generateDefaultState() {\n    return Array.from({ length: 4 }, () => Array(4).fill(0));\n  }\n\n  moveLeft() {\n    if (!this.isStateValid(this.state)) {\n      return;\n    }\n\n    const updatedState = this.state.map((row) => this.applyMove(row));\n\n    this.updateGameState(updatedState);\n    this.completeMoveTasks();\n  }\n\n  moveRight() {\n    const reversedState = this.state.map((row) => [...row].reverse());\n\n    if (!this.isStateValid(reversedState)) {\n      return;\n    }\n\n    const updatedState = reversedState.map((row) =>\n      // eslint-disable-next-line prettier/prettier\n      this.applyMove(row).reverse());\n\n    if (!this.isStateDifferent(this.state, updatedState)) {\n      return;\n    }\n\n    this.updateGameState(updatedState);\n    this.completeMoveTasks();\n  }\n\n  isStateDifferent(stateA, stateB) {\n    return JSON.stringify(stateA) !== JSON.stringify(stateB);\n  }\n\n  moveUp() {\n    const rotatedRightState = this.rotateRight(this.state);\n\n    if (!this.isStateValid(rotatedRightState)) {\n      return;\n    }\n\n    const newState = [\n      ...rotatedRightState.map((row) => this.applyMove([...row])),\n    ];\n\n    const rotatedLeftState = this.rotateLeft(newState);\n\n    this.updateGameState(rotatedLeftState);\n    this.completeMoveTasks();\n  }\n\n  moveDown() {\n    const rotatedRightState = this.rotateRight(this.state);\n    const rotatedLocaleState = [\n      ...rotatedRightState.map((row) => [...row].reverse()),\n    ];\n\n    if (!this.isStateValid(rotatedLocaleState)) {\n      return;\n    }\n\n    const newState = rotatedLocaleState.map((row) =>\n      // eslint-disable-next-line prettier/prettier\n      this.applyMove([...row]).reverse());\n    const rotatedLeftState = this.rotateLeft(newState);\n\n    this.updateGameState(rotatedLeftState);\n    this.completeMoveTasks();\n  }\n\n  applyMove(vector) {\n    const newRow = [];\n\n    let i = 0;\n\n    while (i < vector.length) {\n      const current = vector[i];\n      const next = vector[i + 1];\n\n      if (current) {\n        if (current === next) {\n          newRow.push(current * 2);\n          this.score += current * 2;\n          i += 2;\n        } else {\n          newRow.push(current);\n          i++;\n        }\n      } else {\n        i++;\n      }\n    }\n\n    while (newRow.length < vector.length) {\n      newRow.push(0);\n    }\n\n    return newRow;\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    this.status = Game.gameStatuses.playing;\n    this.completeMoveTasks(2);\n  }\n\n  restart() {\n    this.resetState();\n    this.status = Game.gameStatuses.idle;\n    this.score = 0;\n  }\n\n  generateNewTile() {\n    const emptyCells = this.getEmptyCells();\n\n    if (!emptyCells.length) {\n      return;\n    }\n\n    const [row, col] =\n      emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n    this.state[row][col] = Math.random() < 0.9 ? 2 : 4;\n  }\n\n  getEmptyCells() {\n    const matrix = this.getState();\n\n    return matrix\n      .flatMap((row, rowIndex) =>\n        // eslint-disable-next-line prettier/prettier\n        row.map((cel, colIndex) => (cel === 0 ? [rowIndex, colIndex] : null)))\n      .filter((cell) => cell !== null);\n  }\n\n  rotateLeft(transformedMatrix) {\n    const resultMatrix = [];\n    const cols = transformedMatrix[0].length;\n    const rows = transformedMatrix.length;\n\n    for (let col = 0; col < cols; col++) {\n      resultMatrix.push(Array.from({ length: rows }, () => ''));\n    }\n\n    for (let rowIndex = 0; rowIndex < rows; rowIndex++) {\n      for (let colIndex = 0; colIndex < cols; colIndex++) {\n        const newRow = rowIndex;\n        const newCol = cols - 1 - colIndex;\n\n        resultMatrix[newRow][newCol] = transformedMatrix[colIndex][rowIndex];\n      }\n    }\n\n    return resultMatrix;\n  }\n\n  rotateRight(matrix) {\n    const resultMatrix = [];\n    const cols = matrix[0].length;\n    const rows = matrix.length;\n\n    for (let col = 0; col < cols; col++) {\n      resultMatrix.push(Array.from({ length: rows }, () => ''));\n    }\n\n    for (let rowIndex = 0; rowIndex < rows; rowIndex++) {\n      for (let colIndex = 0; colIndex < cols; colIndex++) {\n        const newRow = cols - 1 - colIndex;\n        const newCol = rowIndex;\n\n        resultMatrix[newRow][newCol] = this.state[rowIndex][colIndex];\n      }\n    }\n\n    return resultMatrix;\n  }\n\n  isStateValid(currentState) {\n    if (this.status !== Game.gameStatuses.playing) {\n      return false;\n    }\n\n    for (const row of currentState) {\n      let hasAdjacentEqualCells = false;\n      let hasIsolatedEmptyCell = false;\n\n      for (let i = 0; i < row.length - 1; i++) {\n        if (row[i] === row[i + 1]) {\n          hasAdjacentEqualCells = true;\n          break;\n        }\n\n        if (!row[i]) {\n          hasIsolatedEmptyCell = true;\n        }\n      }\n\n      if (hasAdjacentEqualCells || hasIsolatedEmptyCell) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  completeMoveTasks(count = 1) {\n    for (let i = 0; i < count; i++) {\n      this.generateNewTile();\n    }\n\n    const state = this.getState();\n\n    if (this.isVictory(state)) {\n      this.status = Game.gameStatuses.win;\n    } else if (this.isDefeat(state)) {\n      this.status = Game.gameStatuses.lose;\n    }\n  }\n\n  isDefeat(state) {\n    const rotatedRight = this.rotateRight(state);\n\n    return [state, rotatedRight].every(\n      (currentState) => !this.isStateValid(currentState),\n    );\n  }\n\n  isVictory(state) {\n    return state.flat().some((tile) => tile === 2048);\n  }\n\n  resetState() {\n    this.state = [...this.initialState.map((row) => [...row])];\n  }\n\n  updateGameState(state) {\n    this.state = state;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$a5fd07fa01589658$var$Game","gameStatuses","idle","playing","win","lose","constructor","initialState","generateDefaultState","state","map","row","status","score","Array","from","length","fill","moveLeft","isStateValid","updatedState","applyMove","updateGameState","completeMoveTasks","moveRight","reversedState","reverse","isStateDifferent","stateA","stateB","JSON","stringify","moveUp","rotatedRightState","rotateRight","newState","rotatedLeftState","rotateLeft","moveDown","rotatedLocaleState","vector","newRow","i","current","next","push","getScore","getState","getStatus","start","restart","resetState","generateNewTile","emptyCells","getEmptyCells","col","Math","floor","random","matrix","flatMap","rowIndex","cel","colIndex","filter","cell","transformedMatrix","resultMatrix","cols","rows","newCol","currentState","hasAdjacentEqualCells","hasIsolatedEmptyCell","count","isVictory","isDefeat","rotatedRight","every","flat","some","tile","$09e991522ca7e64e$var$game","startButton","$09e991522ca7e64e$var$startButton","gameScore","$09e991522ca7e64e$var$gameScore","gameBoardRows","$09e991522ca7e64e$var$gameBoardRows","messageLose","$09e991522ca7e64e$var$messageLose","messageWin","$09e991522ca7e64e$var$messageWin","messageStart","$09e991522ca7e64e$var$messageStart","document","querySelector","querySelectorAll","$09e991522ca7e64e$var$updateGameFields","forEach","cells","textContent","className","cellIndex","cellValue","classList","add","$09e991522ca7e64e$var$updateMessage","remove","$09e991522ca7e64e$var$updateScore","$09e991522ca7e64e$var$isFirstMove","addEventListener","e","key"],"version":3,"file":"index.bee2d2d6.js.map"}